#!/usr/bin/perl

use Kla;
use Getopt::Long;
use Pod::Usage;
use IO::Stty;

my $action;
my $user;
my @groups=();
my $pw;
my $help;
my $firstname;
my $lastname;
my @accessto=();
my @member=();
my $kla = Kla->new;


sub ask($) {
	my $p = shift;
	print "$p: ";
	$_=<STDIN>;
	chomp;
	return $_;
}

sub err($) {
	my $e = shift;
	print STDERR "$e\n";
}

sub login_admin() {
	my $pass;
	my $mode;

	print 'Please enter your administrator password: ';
	$mode = IO::Stty::stty(\*STDIN, '-g');
	IO::Stty::stty(\*STDIN, '-echo');
	$pass = <>;
	IO::Stty::stty(\*STDIN, $mode);
	print "\n";
	chomp $pass;
	$kla->login_admin($pass);
}

$result = GetOptions("action|a=s"	=> \$action,
		     "user|u=s"		=> \$user,
		     "group|g=s"	=> \@groups,
		     "password|p=s"	=> \$pw,
		     "firstname=s"	=> \$firstname,
		     "lastname=s"	=> \$lastname,
		     "trustmode=s"	=> \$trustmode,
		     "accessto=s"	=> \@accessto,
		     "member=s"		=> \@members,
		     "help|h"		=> \$help);

=pod

=head1 NAME

kla - Kerberos Ldap Admin, command line

=head1 SYNOPSIS

C<kla -a adduser -u I<username> -g group1 -g group2 -g group3 [ --firstname firstname --lastname lastname --trustmode (fullaccess|hostbased) --accessto hostname1 [ --accessto hostname2 ...] --password s3cr1t ]>

C<kla --action addgroup --group I<groupname> --member I<member1> [ --member I<member2> ... ]>

C<kla --action password [ --user I<username> --password h4x0r3d ]>

C<kla --action deluser [ --user I<username> ]>

C<kla --action delgroup [ --group I<groupname> [ --group I<groupname> ... ] ]>

C<kla -a addmember [ --group I<groupname> --member I<member> [ --member I<member> ...] ]>

C<kla -a makeadmin -u I<username>>

=head1 DESCRIPTION

The kla command-line utility uses Kla.pm to create and maintain users
and groups in LDAP and Kerberos. In doing so, it tries to mimick the
Debian "adduser" program's behaviour to some extent.

For most actions, you have two options: either use the command-line
options, or just specify the action and have the system ask you
questions.

Kla comes with a set of default configuration files that define what
happens when you create a new user or group, but it is possible to
change them. See L<Kla(3)> for
details.

=head1 ACTIONS

Kla has one required command-line option: C<-a> or C<--action>, which
takes one value: the action to be performed during this kla session.
Exactly one action is B<required>. The meaning of the other command-line
options depends on the chosen action.

The available actions are:

=over

=item *

adduser, deluser: add and remove users

=item *

addgroup, delgroup: add and remove groups

=item *

password: change your own password, or that of another user if you have
admin rights

=item *

addmember: add (a) user(s) to a group.

=back

=head2 adduser, addgroup

These take one required argument -- the user or group to add. The other
arguments are all optional; if they are not specified, and the default
configuration is used, then the system will ask for them interactively.
Use of the --password option is not recommended on multi-user systems or
systems that store shell history files, for security reasons.

The specified password is the password for the new user; if the system
needs an administrator password, it will ask for it clearly.

=cut

if($help) {
	pod2usage(0);
}

if(!defined($action)) {
	pod2usage(1);
}

login_admin();

if($action eq "adduser") {
	my $pw;
	my %vars;

	if(!defined($user)) {
		die "Need a username\n";
	}
	if(defined $firstname) {
		$vars{firstname}=$firstname;
	}
	if(defined $lastname) {
		$vars{lastname}=$lastname;
	}
	if(defined $trustmode) {
		$vars{trustmode}=$trustmode;
	}
	if(defined $accessto) {
		$vars{accessto}=\@accessto;
	}

	$kla->bind();

	$kla->createuser($user, \@groups, \&ask, \&err, \%vars) or die "Could not create user";
	$kla->setpassword($password);
} elsif($action eq "addgroup") {
	my %hash;

	if(scalar(@groups)!=1) {
		die "Need exactly one group when adding groups";
	}
	$kla->bind();
	$kla->creategroup($groups[0], \@members, \&ask, \&err, \%hash);
} elsif($action eq "password") {
	if(!defined $user) {
		die "Please specify the username whose password to change,\nor use kpasswd to change your own\n";
	}
	if(!defined($pw)) {
		my $pw1;
		my $mode = IO::Stty::stty(\*STDIN, '-g');
		IO::Stty::stty(\*STDIN, '-echo');
		print "Please enter the new password:";
		$pw1=<>;
		print "Please re-enter the same password, for verification:";
		$pw=<>;
		IO::Stty::stty(\*STDIN, $mode);
		print "\n";
		die "Sorry, the passwords were not the same" unless ($pw eq $pw1);
		chomp $pw;
	}
	$kla->setpassword($user, $pw);
} elsif($action eq "deluser") {
	if(!defined($user)) {
		die "Need a username";
	}
	$kla->bind();
	$kla->deluser($user);
} elsif($action eq "delgroup") {
	if(scalar(@groups)!=1) {
		die "Need exactly one group name";
	}
	$kla->bind();
	$kla->delgroup($group[0]);
} elsif($action eq "addmember") {
	if(scalar(@members)==0) {
		die "Need at least one member to add to the group";
	}
	if(scalar(@groups)!=1) {
		die "Need exactly one group to add members to";
	}
	$kla->bind();
	$kla->addmember($group[0], \@members);
} elsif($action eq "makeadmin") {
	if(!defined($user)) {
		die "Please enter the username to give admin rights to";
	}
	$kla->bind();
	$kla->makeadmin($user);
} else {
	print STDERR "Invalid action";
	pod2usage(1);
}
